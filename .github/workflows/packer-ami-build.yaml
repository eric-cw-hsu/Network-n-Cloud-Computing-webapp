name: AWS-Deployment

on:
  push:
    branches:
      - main
      - staging
      - demo

jobs:
  packer-ami-build:
    runs-on: ubuntu-latest
    environment: 
      name: AWS_DEPLOYMENT
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/webapp/webapp

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.22.5'

      # Integration Test
      - name: Create config.yaml file
        run: |
          touch config.yaml
          echo database: >> config.yaml
          echo "  test_host: localhost" >> config.yaml
          echo "  test_port: 5432" >> config.yaml
          echo "  test_username: postgres" >> config.yaml
          echo "  test_password: postgres" >> config.yaml
          echo "  test_name: webapp-test-${{ github.sha }}" >> config.yaml
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost; do
            echo "Waiting for postgres to be ready..."
            sleep 1
          done

      - name: Create database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE \"webapp-test-${{ github.sha }}\";" -v ON_ERROR_STOP=1

      - name: Install dependencies
        run: go mod tidy

      - name: Test
        run: go test -v ./...


      # Build Project
      - name: Build project
        run: go build -o app ./cmd/api/main.go


      # Build AMI
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Init Packer
        run: packer init ./packer

      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build AMI
        run: packer build ./packer | tee packer_output.log

      - name: Extract AMI ID
        id: get_ami_id
        run: |
          AMI_ID=$(grep -o 'AMI: ami-[^ ]*' packer_output.log | cut -d' ' -f2)
          echo "AMI ID is $AMI_ID"

          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI ID is empty"
            exit 1
          fi

          touch ami_id.txt
          echo $AMI_ID > ami_id.txt
      
      - name: Upload AMI ID to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ami_id
          path: ami_id.txt

  aws-continuous-deployment:
    needs: packer-ami-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: AWS_DEPLOYMENT

    steps:
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region:  ${{ vars.AWS_REGION }}

      - name: Download AMI ID from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ami_id

      - name: Load AMI ID
        run: |
          AMI_ID=$(cat ami_id.txt)
          echo "AMI ID is $AMI_ID"

          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI ID is empty"
            exit 1
          fi

          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Get Previous Launch Template Version
        run: |
          PREVIOUS_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name ${{ vars.PROD_WEBAPP_LAUNCH_TEMPLATE_NAME }} \
            --query "LaunchTemplateVersions[-1].VersionNumber" --output text)

          echo "Previous Launch Template Version: $PREVIOUS_VERSION"
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Create Launch Template Version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-name ${{ vars.PROD_WEBAPP_LAUNCH_TEMPLATE_NAME }} \
            --version-description "Updated with new version release" \
            --source-version $PREVIOUS_VERSION \
            --launch-template-data "ImageId=$AMI_ID"
      
      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ vars.PROD_WEBAPP_ASG_NAME }} \
            --launch-template "LaunchTemplateName=${{ vars.PROD_WEBAPP_LAUNCH_TEMPLATE_NAME}},Version=\$Latest"

      - name: Trigger Instance Refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.PROD_WEBAPP_ASG_NAME }} \
            --query "InstanceRefreshId" --output text)
          echo "Instance refresh started with ID: $REFRESH_ID"

      - name: Wait for Instance Refresh
        id: refresh_status
        continue-on-error: true
        run: |
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ vars.PROD_WEBAPP_ASG_NAME }} \
              --instance-refresh-ids $REFRESH_ID \
              --query "InstanceRefreshes[0].Status" --output text)
            
            echo "Current Instance Refresh Status: $REFRESH_STATUS"
            
            if [[ "$REFRESH_STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully."
              break
            elif [[ "$REFRESH_STATUS" == "Failed" ]]; then
              echo "Instance refresh failed."
              exit 1
            else
              echo "Instance refresh is in progress. Waiting..."
              sleep 30
            fi
          done


      - name: Rollback to Previous Launch Template Version
        if: ${{ steps.refresh_status.outcome == 'failure' }}
        run: |
          echo "Rolling back to version $PREVIOUS_VERSION"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ vars.PROD_WEBAPP_ASG_NAME }} \
            --launch-template "LaunchTemplateName=${{ vars.PROD_WEBAPP_LAUNCH_TEMPLATE_NAME }},Version=$PREVIOUS_VERSION"

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.PROD_WEBAPP_ASG_NAME }} \
            --query "InstanceRefreshId" --output text)
          
          echo "Instance refresh started with ID: $REFRESH_ID to roll back instances to the previous version"
            